source("clogit-solver.r")
data <- readRDS("../data/BJJ_top_bouts.Rds")
fights <- data[,1:3]
### removing draws
ind.keep <- which(fights[,3] != "draw")
bouts <- fights[ind.keep,]
### recoding win/loss as 0/1
ind.win <- which(bouts[,3] == "win")
bouts[ind.win,3] <- 1
bouts[-ind.win,3] <- 0
### turning names into keys
fighters <- unique(c(bouts[,1],bouts[,2]))
key <- data.frame("name" = fighters, "id" = 1:length(fighters))
bouts[,1] <- key[ match(bouts[,1], key[["name"]] ), "id"]
bouts[,2] <- key[ match(bouts[,2], key[["name"]] ), "id"]
### Reording fights so that winner comes before loser
bouts.reorder <- matrix(as.numeric(apply(bouts, 1, function(x){if(x[3] == 1){x[c(1,2)]} else {x[c(2,1)]}})), ncol = 2, byrow=TRUE)
### Breaking up into separate vector of winners and losers
winners <- bouts.reorder[,1]
losers <- bouts.reorder[,2]
### Fitting our conditional logistic regression (with ridge penalty)
fit <- clogit_solver(winners, losers, step_size = 0.001, maxit = 10000, lambda = 3)
### Finding who is at the top (and what their eta estimates are)
ord <- order(fit$eta, decreasing = TRUE)
top.ord <- ord[1:20]
key[match(top.ord, key[["id"]]), "name"]
fit <- clogit_solver(winners, losers, step_size = 0.001, maxit = 10000, lambda = 0.1)
### Finding who is at the top (and what their eta estimates are)
ord <- order(fit$eta, decreasing = TRUE)
top.ord <- ord[1:20]
key[match(top.ord, key[["id"]]), "name"]
fit$eta[top.ord]
fit <- clogit_solver(winners, losers, step_size = 0.001, maxit = 10000, lambda = 0)
### Finding who is at the top (and what their eta estimates are)
ord <- order(fit$eta, decreasing = TRUE)
top.ord <- ord[1:20]
key[match(top.ord, key[["id"]]), "name"]
fit$eta[top.ord]
fit <- clogit_solver(winners, losers, step_size = 0.001, maxit = 10000, lambda = 10)
### Finding who is at the top (and what their eta estimates are)
ord <- order(fit$eta, decreasing = TRUE)
top.ord <- ord[1:20]
key[match(top.ord, key[["id"]]), "name"]
fit$eta[top.ord]
lambdas <- c(0,exp(seq(from = log(0.1), to = log(10), length.out = 20)))
lambdas
lambdas <- c(0,exp(seq(from = log(0.1), to = log(50), length.out = 20)))
### Fitting our conditional logistic regression (with ridge penalty)
fits <- list()
for(i in 1:length(lambdas)){
fits[[i]] <- list()
fit <- clogit_solver(winners, losers, step_size = 0.001, maxit = 10000, lambda = 3)
ord <- order(fit$eta, decreasing = TRUE)
names.ord <- key[match(ord, key[["id"]]), "name"]
theta.ord <- fit$eta[ord]
fits[[i]]$full.obj <- fit
fits[[i]]$ranks <- names.ord
fits[[i]]$theta <- theta.ord
}
### Fitting our conditional logistic regression (with ridge penalty)
fits <- list()
for(i in 1:length(lambdas)){
fits[[i]] <- list()
fit <- clogit_solver(winners, losers, step_size = 0.001, maxit = 10000, lambda = lambdas[i])
ord <- order(fit$eta, decreasing = TRUE)
names.ord <- key[match(ord, key[["id"]]), "name"]
theta.ord <- fit$eta[ord]
fits[[i]]$full.obj <- fit
fits[[i]]$ranks <- names.ord
fits[[i]]$theta <- theta.ord
}
lambdas <- c(0,exp(seq(from = log(0.1), to = log(50), length.out = 20)))
### Fitting our conditional logistic regression (with ridge penalty)
fits <- list()
for(i in 1:length(lambdas)){
fits[[i]] <- list()
fit <- clogit_solver(winners, losers, step_size = 0.001, maxit = 10000, lambda = lambdas[i])
## Ordering by eta value
ord <- order(fit$eta, decreasing = TRUE)
names.ord <- key[match(ord, key[["id"]]), "name"]
eta.ord <- fit$eta[ord]
## Putting ordered
fits[[i]]$full.obj <- fit
fits[[i]]$ranks <- names.ord
fits[[i]]$eta <- eta.ord
}
fits[[1]]$ranks
fits[[1]]$ranks[1:20]
fits[[2]]$ranks[1:20]
fits[[20]]$ranks[1:20]
lambdas <- c(0,exp(seq(from = log(0.1), to = log(50), length.out = 50)))
### Fitting our conditional logistic regression (with ridge penalty)
fits <- list()
for(i in 1:length(lambdas)){
fits[[i]] <- list()
fit <- clogit_solver(winners, losers, step_size = 0.001, maxit = 10000, lambda = lambdas[i])
## Ordering by eta value
ord <- order(fit$eta, decreasing = TRUE)
names.ord <- key[match(ord, key[["id"]]), "name"]
eta.ord <- fit$eta[ord]
## storing ordered output
fits[[i]]$full.obj <- fit
fits[[i]]$ranks <- names.ord
fits[[i]]$eta <- eta.ord
}
?save
save(fits, file = "../output/analysis-out.RDS")
fits <- readRDS("../output/BJJ_top_bouts.Rds")
fits <- readRDS("../output/analysis-out.RDS")
save(fits, file = "../output/analysis-out.RData")
fits <- load("../output/analysis-out.Rdata")
fits
out.load <- load("../output/analysis-out.Rdata")
fits <- out.load$fits
out.load <- load("../output/analysis-out.Rdata")
fits <- out.load$fits
out.load
out.load$fits
save("fits", file = "../output/analysis-out.RData")
out.load <- load("../output/analysis-out.Rdata")
out.load
save(list = fits, file = "../output/analysis-out.RData")
save(fits, list = fits, file = "../output/analysis-out.RData")
save("fits", list = fits, file = "../output/analysis-out.RData")
save(fits, list = fits, file = "../output/analysis-out.RData")
source("clogit-solver.r")
data <- readRDS("../data/BJJ_top_bouts.Rds")
fights <- data[,1:3]
### removing draws
ind.keep <- which(fights[,3] != "draw")
bouts <- fights[ind.keep,]
### recoding win/loss as 0/1
ind.win <- which(bouts[,3] == "win")
bouts[ind.win,3] <- 1
bouts[-ind.win,3] <- 0
### turning names into keys
fighters <- unique(c(bouts[,1],bouts[,2]))
key <- data.frame("name" = fighters, "id" = 1:length(fighters))
bouts[,1] <- key[ match(bouts[,1], key[["name"]] ), "id"]
bouts[,2] <- key[ match(bouts[,2], key[["name"]] ), "id"]
### Reording fights so that winner comes before loser
bouts.reorder <- matrix(as.numeric(apply(bouts, 1, function(x){if(x[3] == 1){x[c(1,2)]} else {x[c(2,1)]}})), ncol = 2, byrow=TRUE)
### Breaking up into separate vector of winners and losers
winners <- bouts.reorder[,1]
losers <- bouts.reorder[,2]
lambdas <- c(0,exp(seq(from = log(0.1), to = log(50), length.out = 50)))
### Fitting our conditional logistic regression (with ridge penalty)
fits <- list()
for(i in 1:length(lambdas)){
fits[[i]] <- list()
fit <- clogit_solver(winners, losers, step_size = 0.001, maxit = 10000, lambda = lambdas[i])
## Ordering by eta value
ord <- order(fit$eta, decreasing = TRUE)
names.ord <- key[match(ord, key[["id"]]), "name"]
eta.ord <- fit$eta[ord]
## storing ordered output
fits[[i]]$full.obj <- fit
fits[[i]]$ranks <- names.ord
fits[[i]]$eta <- eta.ord
}
save(fits, list = fits, file = "../output/analysis-out.RData")
fits
save(fits, file = "../output/analysis-out.RData")
out.load <- load("../output/analysis-out.Rdata")
out.load
?writeRDS
?readRDS
saveRDS(fits, file = "../output/analysis-out.RDS")
out.load <- readRDS("../output/analysis-out.RDS")
out.load
data <- readRDS("../data/BJJ_top_bouts.Rds")
key
key[["id"]]
fits[[i]]$full.obj$eta[key[["id"]]]
library(tidyr)
names(key)
fitted.vals <- data.frame(name = key$name)
library(dplyr)
fitted.vals <- data.frame(name = key$name)
for(i in 1:length(fits)){
fitted.vals <- mutate("eta.{i}" = fits[[i]]$full.obj$eta[key[["id"]]])
}
fitted.vals <- dplyr::mutate("eta.{i}" = fits[[i]]$full.obj$eta[key[["id"]]])
for(i in 1:length(fits)){
fitted.vals <- dplyr::mutate("eta.{i}" := fits[[i]]$full.obj$eta[key[["id"]]])
}
dplyr::version
version(dplyr)
sessionInfo()
fitted.vals <- data.frame(name = key$name)
for(i in 1:length(fits)){
varname = paste0("eta",i)
fitted.vals <- dplyr::mutate(!!varname := fits[[i]]$full.obj$eta[key[["id"]]])
}
fitted.vals <- data.frame(name = key$name)
for(i in 1:length(fits)){
varname = paste0("eta",i)
fitted.vals <- dplyr::mutate(!!varname = fits[[i]]$full.obj$eta[key[["id"]]])
fitted.vals <- data.frame(name = key$name)
for(i in 1:length(fits)){
varname = paste0("eta",i)
fitted.vals <- dplyr::mutate(!!varname:= fits[[i]]$full.obj$eta[key[["id"]]])
}
i<- 1
varname = paste0("eta",i)
varname
fitted.vals <- dplyr::mutate(!!varname:= fits[[i]]$full.obj$eta[key[["id"]]])
fitted.vals <- dplyr::mutate(!!varname = fits[[i]]$full.obj$eta[key[["id"]]])
fitted.vals <- data.frame(name = key$name)
for(i in 1:length(fits)){
varname = paste0("eta",i)
fitted.vals <- fitted.values %>% dplyr::mutate(!!varname = fits[[i]]$full.obj$eta[key[["id"]]])
fitted.vals <- data.frame(name = key$name)
for(i in 1:length(fits)){
varname = paste0("eta",i)
fitted.vals <- fitted.values %>% dplyr::mutate(!!varname := fits[[i]]$full.obj$eta[key[["id"]]])
}
fitted.vals <- data.frame(name = key$name)
for(i in 1:length(fits)){
varname = paste0("eta",i)
fitted.vals <- fitted.vals %>% dplyr::mutate(!!varname := fits[[i]]$full.obj$eta[key[["id"]]])
}
fitted.vals <- fitted.vals %>% mutate("eta.{i}" = fits[[i]]$full.obj$eta[key[["id"]]])
fitted.vals <- data.frame(name = key$name)
for(i in 1:length(fits)){
#  varname = paste0("eta",i)
# fitted.vals <- fitted.vals %>% dplyr::mutate(!!varname := fits[[i]]$full.obj$eta[key[["id"]]])
fitted.vals <- fitted.vals %>% mutate("eta.{i}" = fits[[i]]$full.obj$eta[key[["id"]]])
}
fitted.vals
fitted.vals[1:5,]
fitted.vals <- data.frame(name = key$name)
for(i in 1:length(fits)){
#  varname = paste0("eta",i)
# fitted.vals <- fitted.vals %>% dplyr::mutate(!!varname := fits[[i]]$full.obj$eta[key[["id"]]])
fitted.vals <- fitted.vals %>% mutate("eta.{i}" := fits[[i]]$full.obj$eta[key[["id"]]])
}
head(fitted.vals)
plot(0,0, type = n, xlim = c(0,52), ylim = c(-10,10))
plot(0,0, type = n, xlim = c(0,52), ylim = c(-10,10))
for(i in 1:nrow(fitted.vals)){
lines(fitted.vals[,-1], 1:51)
}
i <- 1
lines(fitted.vals[i,-1], 1:51)
fitted.vals[i,-1]
1:51
plot(0,0, type = n, xlim = c(0,52), ylim = c(-10,10))
for(i in 1:nrow(fitted.vals)){
lines(fitted.vals[i,-1], 1:51)
}
plot(0,0, type = n, xlim = c(0,52), ylim = c(-10,10))
plot(0,0, type = n, xlim = c(0,52), ylim = c(-10,10))
dev.off()
plot(0,0, type = n, xlim = c(0,52), ylim = c(-10,10))
plot(0,0, type = "n", xlim = c(0,52), ylim = c(-10,10))
for(i in 1:nrow(fitted.vals)){
lines(1:51,fitted.vals[i,-1])
}
top.people <- c()
for(i in 1:length(fits))
top.people <- union(top.people, fits[[i]]$ranks[1:20])
top.people <- c()
for(i in 1:length(fits)){
top.people <- union(top.people, fits[[i]]$ranks[1:20])
}
top.people
top.etas <- fitted.vals %>% filter(names %in% top.people)
names(fitted.vals)
top.etas <- fitted.vals %>% filter(name %in% top.people)
top.etas
plot(0,0, type = "n", xlim = c(0,52), ylim = c(-10,10))
for(i in 1:nrow(top.etas)){
lines(1:51,top.etas[i,-1])
}
plot(0,0, type = "n", xlim = c(0,52), ylim = c(0,8))
for(i in 1:nrow(top.etas)){
lines(1:51,top.etas[i,-1])
}
colfunc <- colorRampPalette(c("black", "white"))
colfunc <- colorRampPalette(c("red", "blue"))
colfunc(20)
rank.unreg <- fits[[1]]%>%select(ranks) %>% filter(name %in% top.people)
rank.unreg <- fits[[1]]$ranks %>% filter(name %in% top.people)
fits[[1]]$ranks
rank.unreg <- data.frame(fits[[1]]$ranks) %>% filter(name %in% top.people)
rank.unreg <- data.frame(name = fits[[1]]$ranks) %>% filter(name %in% top.people)
rank.unreg
colfunc <- colorRampPalette(c("red", "blue"))
spectrum <- colfunc(length(rank.unreg))
plot(0,0, type = "n", xlim = c(0,52), ylim = c(0,8))
top.etas
rank.unreg <- data.frame(name = fits[[1]]$ranks) %>% filter(name %in% top.people)
rank.unreg$ranks <- 1:nrwo(rank.unreg)
rank.unreg$ranks <- 1:nrow(rank.unreg)
rank.unreg
top.etas
dat.plot <- left_join(top.eta, rank.unreg)
dat.plot <- left_join(top.etas, rank.unreg)
dat.plot[1:4,]
i <- 1
dat.plot <- left_join(top.etas, rank.unreg)
colfunc <- colorRampPalette(c("red", "blue"))
spectrum <- colfunc(length(rank.unreg))
plot(0,0, type = "n", xlim = c(0,52), ylim = c(0,8))
etas_i <- dat.plot %>% select(-name, -ranks) %>% slice(i)
etas_i
lines(1:51,etas_i, col = spectrum[dat.plot$ranks[i]])
etas_i
spectrum[dat.plot$ranks[i]]
names(dat.plot)
dat.plot$ranks
dat.plot$ranksi]
dat.plot$ranks[i]
spectrum(dat.plot$ranks[i])
spectrum
colfunc
spectrum <- colfunc(nrow(rank.unreg))
spectrum
plot(0,0, type = "n", xlim = c(0,52), ylim = c(0,8))
for(i in 1:nrow(dat.plot)){
etas_i <- dat.plot %>% select(-name, -ranks) %>% slice(i)
lines(1:51,etas_i, col = spectrum[dat.plot$ranks[i]])
}
top.people <- c()
for(i in 1:length(fits)){
top.people <- union(top.people, fits[[i]]$ranks[1:10])
}
top.etas <- fitted.vals %>% filter(name %in% top.people)
rank.unreg <- data.frame(name = fits[[1]]$ranks) %>% filter(name %in% top.people)
rank.unreg$ranks <- 1:nrow(rank.unreg)
dat.plot <- left_join(top.etas, rank.unreg)
colfunc <- colorRampPalette(c("red", "blue"))
spectrum <- colfunc(nrow(rank.unreg))
plot(0,0, type = "n", xlim = c(0,52), ylim = c(0,8))
for(i in 1:nrow(dat.plot)){
etas_i <- dat.plot %>% select(-name, -ranks) %>% slice(i)
lines(1:51,etas_i, col = spectrum[dat.plot$ranks[i]])
}
plot(0,0, type = "n", xlim = c(0,52), ylim = c(0,8))
for(i in 1:nrow(dat.plot)){
etas_i <- dat.plot %>% select(-name, -ranks) %>% slice(i)
lines(log(0.001+lambdas),etas_i, col = spectrum[dat.plot$ranks[i]])
}
plot(0,0, type = "n", xlim = c(-10,5), ylim = c(0,8))
for(i in 1:nrow(dat.plot)){
etas_i <- dat.plot %>% select(-name, -ranks) %>% slice(i)
lines(log(0.001+lambdas),etas_i, col = spectrum[dat.plot$ranks[i]])
}
plot(0,0, type = "n", xlim = c(-10,5), ylim = c(0,8), xlab = "Amount of Regularization", ylab = "Estimated ELO (skill)")
for(i in 1:nrow(dat.plot)){
etas_i <- dat.plot %>% select(-name, -ranks) %>% slice(i)
lines(log(0.001+lambdas),etas_i, col = spectrum[dat.plot$ranks[i]])
}
plot(0,0, type = "n", xlim = c(-7,5), ylim = c(0,8), xlab = "Amount of Regularization", ylab = "Estimated ELO (skill)")
for(i in 1:nrow(dat.plot)){
etas_i <- dat.plot %>% select(-name, -ranks) %>% slice(i)
lines(log(0.001+lambdas),etas_i, col = spectrum[dat.plot$ranks[i]])
}
plot(0,0, type = "n", xlim = c(-7,4), ylim = c(0,8), xlab = "Amount of Regularization", ylab = "Estimated ELO (skill)")
for(i in 1:nrow(dat.plot)){
etas_i <- dat.plot %>% select(-name, -ranks) %>% slice(i)
lines(log(0.001+lambdas),etas_i, col = spectrum[dat.plot$ranks[i]])
}
plot(0,0, type = "n", xlim = c(-7,4), ylim = c(0,8), xlab = "Amount of Regularization", ylab = "Estimated ELO (skill)")
for(i in 1:nrow(dat.plot)){
etas_i <- dat.plot %>% select(-name, -ranks) %>% slice(i)
lines(log(0.001+lambdas),etas_i, col = col.alpha(spectrum[dat.plot$ranks[i]], 0.7), lwd = 3)
}
?rgb
install.packages("rethinking")
lines(log(0.001+lambdas),etas_i, col = adjust_transparency((spectrum[dat.plot$ranks[i]], 0.7), lwd = 3)
plot(0,0, type = "n", xlim = c(-7,4), ylim = c(0,8), xlab = "Amount of Regularization", ylab = "Estimated ELO (skill)")
for(i in 1:nrow(dat.plot)){
etas_i <- dat.plot %>% select(-name, -ranks) %>% slice(i)
lines(log(0.001+lambdas),etas_i, col = adjust_transparency(spectrum[dat.plot$ranks[i]], 0.7), lwd = 3)
}
install.packages("colorspace")
library(colorspace)
plot(0,0, type = "n", xlim = c(-7,4), ylim = c(0,8), xlab = "Amount of Regularization", ylab = "Estimated ELO (skill)")
for(i in 1:nrow(dat.plot)){
etas_i <- dat.plot %>% select(-name, -ranks) %>% slice(i)
lines(log(0.001+lambdas),etas_i, col = adjust_transparency(spectrum[dat.plot$ranks[i]], 0.7), lwd = 3)
}
